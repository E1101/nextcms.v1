<?php
/**
 * NextCMS
 * 
 * @author		Nguyen Huu Phuoc <thenextcms@gmail.com>
 * @copyright	Copyright (c) 2011 - 2012, Nguyen Huu Phuoc
 * @license		http://nextcms.org/license.txt	(GNU GPL version 2 or later)
 * @link		http://nextcms.org
 * @category	modules
 * @package		file
 * @subpackage	hooks
 * @since		1.0
 * @version		2012-10-01
 */

defined('APP_VALID_REQUEST') || die('You cannot access the script directly.');
?>

<?php if (!$this->accessor()->route('file_file_upload')) : ?>

<div id="fileHooksUploaderContainer" class="fileHooksUploaderContainer" data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="region: 'center', gutters: true, title: '<?php echo $this->translator(true)->_('show.title'); ?>', class: 'app-content-pane'">
	<div data-dojo-type="dojox/layout/ContentPane" data-dojo-props="region: 'center', style: 'border: none'">
		<?php echo $this->translator()->_('show.notAllowed'); ?>
	</div>
</div>

<?php else : ?>

<div id="fileHooksUploaderContainer" class="fileHooksUploaderContainer" data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="region: 'center', gutters: true, title: '<?php echo $this->translator(true)->_('show.title'); ?>', class: 'app-content-pane'">
	<div data-dojo-type="dojox/layout/ContentPane" data-dojo-props="region: 'top', style: 'border: none'">
		<div style="padding-bottom: 8px">
			<?php echo sprintf($this->translator()->_('show.maxUploadSize'), ini_get('upload_max_filesize')); ?>
		</div>
	
		<div data-dojo-type="dijit/form/Form" data-dojo-props="action: '<?php echo $this->url(array(), 'file_file_upload'); ?>', method: 'POST', encType: 'multipart/form-data', class: 'app-form'">
			<div id="fileHooksUploaderUploader"></div>
			
			<div id="fileHooksUploaderProgress" data-dojo-type="dijit/ProgressBar"></div>
		</div>
	</div>
	
	<div data-dojo-type="dojox/layout/ContentPane" data-dojo-props="region: 'center'">
		<div class="hook-file-uploader-files" id="fileHooksUploaderFilesContainer" data-dojo-type="dojo/dnd/AutoSource" data-dojo-props="accept: [], selfAccept: false, selfCopy: false">
			<!-- LESSON: I can easily modify the template for each file item -->
			<div id="fileHooksUploaderFileTemplate" class="hook-file-uploader-file dojoDndItem" style="display: none">
				<div class="hook-file-uploader-thumb">
					<img src="<?php echo $this->APP_ROOT_URL; ?>/modules/file/hooks/uploader/file.png" />				
				</div>
				<div class="fileHooksUploaderFileInfo">
					<?php echo $this->translator()->_('show.fileName'); ?>: <a href="<?php echo $this->APP_ROOT_URL; ?>###file_url###" target="_blank">###file_name###</a><br />
					<?php echo $this->translator()->_('show.fileSize'); ?>: ###file_size###
				</div>
			</div>
		</div>
	</div>
</div>

<?php $this->script()->captureStart(); ?>
/* file.hooks.uploader */
require({
	paths: {
		"file": "<?php echo $this->APP_STATIC_URL; ?>/modules/file"
	}
});

require([
	"dojo/dom",
	"dojo/dom-attr",
	"dojo/dom-construct",
	"dojo/io-query",
	"dojo/json",
	"dojo/on",
	"dojo/ready",
	"dojo/sniff",
	"dojo/topic",
	"dijit/registry",
	"dojo/dnd/AutoSource",
	"dojo/parser",
	"dojo/query",
	"dijit/form/Form",
	"dijit/layout/BorderContainer",
	"dijit/ProgressBar",
	"dojox/layout/ContentPane",
	"core/js/base/Encoder",
	"core/js/base/Uploader",
	"core/js/Constant",
	"file/js/views/FileFormatter"
], function(dojoDom, dojoDomAttr, dojoDomConstruct, dojoIoQuery, dojoJson, dojoOn, dojoReady, dojoSniff, dojoTopic, dijitRegistry) {
	dojoReady(function() {
		var uploadType   = dojoSniff("ie") ? "flash" : "html5";
		var fileUploader = new core.js.base.Uploader({
			name: "uploadedfile",
			flashFieldName: "uploadedfile",
			deferredUploading: true,
			multiple: true,
			type: "file",
			uploadOnSelect: true,
			label: "<?php echo $this->translator(true)->_('show.browseFilesAction'); ?>",
			url: ("html5" == uploadType) ? "<?php echo $this->url(array(), 'file_file_upload'); ?>?PHPSESSID=<?php echo Zend_Session::getId(); ?>&name=uploadedfile&uploader=html5&mod=file"
										 : "<?php echo $this->url(array(), 'file_file_upload'); ?>/file/false/false?PHPSESSID=<?php echo Zend_Session::getId(); ?>",
			style: "width: 200px",
			
			// Increase it if you want to upload more files at the same time
			// when use Flash uploader
			serverTimeout: 10000,
		
			// Custom properties and methods
			appUploadType: uploadType,
			appUploadUrlTemplate: ("html5" == uploadType) ? "<?php echo $this->url(array(), 'file_file_upload'); ?>?PHPSESSID=<?php echo Zend_Session::getId(); ?>&name=uploadedfile&uploader=html5&mod=###module###"
										 				  : "<?php echo $this->url(array(), 'file_file_upload'); ?>/###module###/false/false?PHPSESSID=<?php echo Zend_Session::getId(); ?>",
			
			showUploadedFiles: function(dataArray) {
				// summary:
				//		Shows the uploaded files
				var template = dojoDom.byId("fileHooksUploaderFileTemplate").innerHTML, message = null;
				for (var i in dataArray) {
					// Check error
					if (dataArray[i].original.error) {
						switch (dataArray[i].original.error) {
							case "<?php echo File_Services_Uploader::ERROR_NOT_UPLOADABLE_EXT; ?>":
								message = "<?php echo $this->translator()->_('show.notUploadableExtensionError'); ?>";
								break;
							case "<?php echo File_Services_Uploader::ERROR_BIG_FILE_SIZE; ?>":
								message = "<?php echo $this->translator()->_('show.bigFileSizeError'); ?>";
								break;
							case "<?php echo File_Services_Uploader::ERROR_NO_FILES; ?>":
								message = "<?php echo $this->translator()->_('show.noFilesError'); ?>";
								break;
							case "<?php echo File_Services_Uploader::ERROR_CANNOT_MOVE; ?>":
								message = "<?php echo $this->translator()->_('show.cannotMoveError'); ?>";
								break;
							default:
								message = "<?php echo $this->translator()->_('show.uploadError'); ?>";
								break;
						}
						dojoTopic.publish("/app/global/notification", {
							message: message,
							type: "error"
						});
						continue;
					}
	
					var html = template.replace(/###file_name###/g, dataArray[i].original.name)
									   .replace(/###file_url###/g, dataArray[i].original.url)
									   .replace(/###file_size###/g, file.js.views.FileFormatter.formatSize(dataArray[i].original.size));
					var div  = dojoDomConstruct.create("div", {
						className: "hook-file-uploader-file dojoDndItem",
						innerHTML: html
					}, "fileHooksUploaderFilesContainer");
	
					switch (dataArray[i].original.extension.toLowerCase()) {
						case "bmp":
						case "gif":
						case "jpg":
						case "jpeg":
						case "png":
							var img = dojo.query("img", div)[0];
							dojoDomAttr.set(img, "src", core.js.Constant.ROOT_URL + dataArray[i].original.url);
							dojoDomAttr.set(div, {
								dndtype: "appDndImage",
								"data-app-dndimage": dojoJson.stringify({
									url: core.js.Constant.ROOT_URL + dataArray[i].original.url,
									title: dataArray[i].original.name
								})
							});
							break;
						// TODO: Add more extensions supported by the Strobe Media Playback
						case "f4v":
						case "flv":
						case "m4v":
						case "mov":
						case "mp3":
						case "mp4":
						case "swf":
							dojoDomAttr.set(div, {
								dndtype: "appDndVideo,appDndLink",
								"data-app-dndlink": core.js.base.Encoder.encode({
									url: core.js.Constant.ROOT_URL + dataArray[i].original.url,
									title: dataArray[i].original.name
								}),
								"data-app-dndvideo": core.js.base.Encoder.encode({
									src: core.js.Constant.ROOT_URL + dataArray[i].original.url,
									poster: ""
								})
							});
							break;
						default:
							dojoDomAttr.set(div, {
								dndtype: "appDndLink",
								"data-app-dndlink": core.js.base.Encoder.encode({
									url: core.js.Constant.ROOT_URL + dataArray[i].original.url,
									title: dataArray[i].original.name
								})
							});
							break;
					}
				}
			}
		});
		dojoDom.byId("fileHooksUploaderUploader").appendChild(fileUploader.domNode);
		fileUploader.startup();
		
		dojoOn(fileUploader, "begin", function() {
			if ("html5" == fileUploader.get("appUploadType")) {
				fileUploader.set("disabled", true);
			}
		});
	
		dojoOn(fileUploader, "progress", function(evt) {
			dijitRegistry.byId("fileHooksUploaderProgress").update({
				progress: evt.percent.substr(0, evt.percent.length - 1)
			});
		});
		
		dojoOn(fileUploader, "filecomplete", function(dataArray) {
			if ("flash" == fileUploader.get("appUploadType")) {
				dataArray = dataArray.additionalParams.appUploadedFiles;
				dataArray = core.js.base.Encoder.decode(dataArray);
				fileUploader.showUploadedFiles(dataArray);
			}
		});
	
		dojoOn(fileUploader, "complete", function(dataArray) {
			if ("html5" == fileUploader.get("appUploadType")) {
				fileUploader.set("disabled", false);
				fileUploader.showUploadedFiles(dataArray);
			}
		});
	
		// Update the uploader endpoint when loading a back-end URL
		dojoTopic.subscribe("/app/global/onHashChange", function(hash) {
			var obj = dojoIoQuery.queryToObject(hash);
			if (!obj.u) {
				return;
			}
			var url		  = obj.u;
			var prefixUrl = "<?php echo $this->backendUrl(); ?>";
			if (url.substr(0, prefixUrl.length) == prefixUrl) {
				url = url.substr(prefixUrl.length);
				// Now, url is in the format of /module/controller/action/query
				if (url.length > 0 && url[0] == "/") {
					url = url.substr(1);
				}
				var pos		 = url.indexOf("/");
				var module	 = (pos == -1) ? url : url.substr(0, pos);
				var uploader = dijitRegistry.byId("fileHooksUploaderUploader");
				uploader.set("url", uploader.get("appUploadUrlTemplate").replace(/###module###/g, module));
			}
		});
	});
});
<?php $this->script()->captureEnd(); ?>

<?php endif; ?>
